doctype html
html(lang="en")
    mixin await(url)
        span(data-await=url).await-loading
    head
        meta(charset="UTF-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        link(rel="stylesheet",href="./style.css")
        link(rel="icon",href="./stj-logo.png")
        block head
    body
        block header
            header.mb-1.py-2.align-items-center.d-flex.flex-wrap
                a(href="./").align-items-center.d-flex.flex-wrap.text-decoration-none.nav-link
                    div.ps-2.d-flex.flex-column.align-items-center
                        h5.m-0 Elastic Profmus
                div.flex-fill.d-none.d-lg-block
                nav.d-print-none
                    ul.container.d-flex.nav.align-items-center.justify-content-evenly.flex-wrap
                        li.nav-link.py-1.px-2.mx-1
                            input(type="submit", formaction="./", value="Registos", form="filter-form",class=currentPage=="search"?"active":"").border-0.nav-link.fs-6.bg-transparent
                        li.nav-link.py-1.px-2.mx-1
                            input(type="submit", formaction="./indices", value="Indíces", form="filter-form",class=currentPage=="list"?"active":"").border-0.nav-link.fs-6.bg-transparent
            .col-12.col-lg-6.d-none.d-print-block
                block printpageinfo
                    p Sem informação da página
        main.container-fluid#top
            if error 
                form(method="get",style="top:0;")#filter-form.position-sticky
                pre.alert.alert-danger
                    code !{JSON.stringify(error, null , 2)}

            else
                block allmain
                    .row
                        .col-12.col-sm-4.col-md-3.col-xl-2.d-print-none.infofilters
                            form(method="get",style="top:0;")#filter-form.position-sticky
                                block form
                                    .d-block
                                        .d-flex.align-items-center.justify-content-between
                                            block form-title
                                                if body 
                                                    b.d-inline.m-0                          
                                                        i.bi-archive 
                                                        | !{body.hits.total.value} Registos        
                                            if Object.keys(filters).length > 0 || q
                                                a(href=`?q=`).text-danger.text-decoration-none
                                                    i.bi-eraser-fill
                                                    | Limpar
                                        mixin usedFilters(key)
                                            -let cache = []
                                            if key in filters
                                                for f in filters[key]
                                                    if cache.indexOf(f) == -1
                                                        -cache.push(f)
                                                        .form-check.form-check-inline.my-0(style="--border-color: #0f0")
                                                            input.form-check-input(type="checkbox", name=key, value=f, checked, id=`checkbox-${f.replace(/\s/g, "")}`, hidden)
                                                            label.form-check-label(for=`checkbox-${f.replace(/\s/g, "")}`).d-flex.justify-content-between.align-items-center.w-100
                                                                span.d-block !{f}
                                                                span.d-block: i.bi-trash
                                        mixin filterlist(key)
                                            .d-flex.flex-column.my-1.border.pb-1
                                                +await(`./datalist?id=datalist-${encodeURIComponent(key)}&agg=${key}&${querystring}`)
                                                input.form-control.form-control-sm.border-0.border-bottom.rounded-0(type="text", name=key, autocomplete="off", list=`datalist-${encodeURIComponent(key)}`, placeholder=`${key}`,disabled)
                                                +usedFilters(key)
                                        .d-flex.flex-column.my-1
                                            input.form-control.form-control-sm.rounded-0(type="search", name="q", placeholder=`Texto Livre`, value=q||"")
                                        for prop in properties
                                            +filterlist(prop)
                                        +await(`./datalist?id=datalist-Campos&agg=Campos&${querystring}`)
                                        if "hasField" in filters
                                            .d-flex.flex-column.my-1.border.pb-1
                                                input.form-control.form-control-sm.border-0.border-bottom.rounded-0(type="text", name="hasField", autocomplete="off", list=`datalist-Campos`, placeholder=`Tem de ter o campo`, disabled)
                                                +usedFilters("hasField")
                                        if "notHasField" in filters
                                            .d-flex.flex-column.my-1.border.pb-1
                                                input.form-control.form-control-sm.border-0.border-bottom.rounded-0(type="text", name="notHasField", autocomplete="off", list=`datalist-Campos`, placeholder=`Não pode ter o campo`, disabled)
                                                +usedFilters("notHasField")
                        .col-12.col-sm-8.col-md-9.col-xl-10#main: block main
        script.
            window.addEventListener('DOMContentLoaded', function(){
                let elems = Array.from(document.getElementsByClassName(`await-loading`));
                elems.forEach(elem => {
                    fetch(elem.dataset.await).then(response => response.text()).then(text => {
                        elem.classList.remove("await-loading");
                        elem.innerHTML = text;
                        let loaded = document.createEvent("HTMLEvents");
                        loaded.initEvent("loaded", true, true);
                        elem.dispatchEvent(loaded);
                    });
                });

                // Auto-submit form
                document.getElementById("filter-form").addEventListener("change", function(e){
                    if( e.target.validity.valid ){
                        document.getElementById("filter-form").submit();
                    }
                    else {
                        e.target.reportValidity();
                    }
                });
            })
            window.addEventListener('loaded', function(e){
                let datalist = e.target.querySelector("datalist");
                if( !datalist ) return;
                if( datalist.children.length <= 0 ) return;

                document.querySelectorAll(`input[list="${datalist.id}"]`).forEach(input => input.disabled = false);
            })

            /*function checkDataListInput(elm){
                let val = elm.value;
                let dlist = elm.list;
                let opts = dlist.childNodes;
                if( opts.length == 1 ){
                    elm.value = `"${f}"`
                    elm.unfocus()
                }
            }*/